//////////////////////////////////////////////////////////////////////////////////
// Initially Generated by Sioux C# StateMachine Code Generator 					//
//  User changes allowed, requires merging when re-generated		            //
//////////////////////////////////////////////////////////////////////////////////
using Inspector.Hal.Interfaces;
using Inspector.Infra.Ioc;
using HalEvents = Inspector.Hal.Interfaces.Events;

namespace Inspector.Connection.EventTranslation
{
    /// <summary>
    /// Convert incoming events to function calls on the state machine  
    /// </summary>
    public partial class EventToCallConnectionStateMachine
    {
        private IHal m_Hal;

        public IHal Hal
        {
            get
            {
                if (m_Hal == null)
                {
                    m_Hal = ContextRegistry.Context.Resolve<IHal>();
                }
                return m_Hal;
            }
            set
            {
                m_Hal = value;
            }
        }

        public void Initialize()
        {
            Hal.Connected += new System.EventHandler(Hal_Connected);
            Hal.ConnectFailed += new System.EventHandler(Hal_ConnectFailed);
            Hal.Disconnected += new System.EventHandler(Hal_Disconnected);
            Hal.MessageReceived += new System.EventHandler(Hal_MessageReceived);
            Hal.MessageReceivedError += new System.EventHandler(Hal_MessageReceivedError);
            Hal.MeasurementsReceived += new System.EventHandler(Hal_MeasurementsReceived);
            Hal.ContinuousMeasurementStopped += new System.EventHandler(Hal_ContinuousMeasurementStopped);
            Hal.ContinuousMeasurementStarted += new System.EventHandler(Hal_ContinuousMeasurementStarted);
        }

        void Hal_ContinuousMeasurementStarted(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.ContinuousMeasurementStartedTrigger();
        }

        void Hal_ContinuousMeasurementStopped(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.ContinuousMeasurementStoppedTrigger();
        }

        void Hal_MeasurementsReceived(object sender, System.EventArgs e)
        {
            HalEvents.MeasurementsReceivedEventArgs measurementReceivedEventArgs = e as HalEvents.MeasurementsReceivedEventArgs;
            m_ConnectionStateMachineContext.MeasurementReceivedTrigger(measurementReceivedEventArgs.Measurements);
        }

        void Hal_MessageReceivedError(object sender, System.EventArgs e)
        {
            HalEvents.MessageErrorEventArgs messageErrorEventsArgs = e as HalEvents.MessageErrorEventArgs;
            m_ConnectionStateMachineContext.ErrorTrigger(messageErrorEventsArgs.Message, messageErrorEventsArgs.ErrorCode);
        }

        void Hal_MessageReceived(object sender, System.EventArgs e)
        {
            HalEvents.MessageReceivedEventArgs messageReceivedEventArgs = e as HalEvents.MessageReceivedEventArgs;
            m_ConnectionStateMachineContext.MessageReceivedTrigger(messageReceivedEventArgs.Data);
        }

        void Hal_Disconnected(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.DisconnectedTrigger();
        }

        void Hal_ConnectFailed(object sender, System.EventArgs e)
        {
            HalEvents.ConnectFailedEventArgs connectFailedEventArgs = e as HalEvents.ConnectFailedEventArgs;
            m_ConnectionStateMachineContext.ConnectFailedTrigger(connectFailedEventArgs.Message, connectFailedEventArgs.ErrorCode);
        }

        void Hal_Connected(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.ConnectedTrigger();
        }
    }
}
