// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
using System.IO;

#pragma warning disable
namespace Inspector.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculations")]
    public partial class CalculationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Calculations.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            var path = Path.GetDirectoryName(typeof(CalculationsFeature).Assembly.Location);
            NUnit.Framework.Assert.IsNotNull(path);
            Directory.SetCurrentDirectory(path);

            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calculations", "\tIn order to test the calculations\r\n\tAs the end user\r\n\tI want to verify the calcu" +
                    "lations in the ContinuousMeasurementWorker", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify calculations")]
        [NUnit.Framework.CategoryAttribute("VerifyCalculations")]
        public virtual void VerifyCalculations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify calculations", new string[] {
                        "VerifyCalculations"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "SequenceNumber",
                        "UnitLowPressure",
                        "UnitHighPressure",
                        "FactorLowHighPressure",
                        "UnitChangeRate",
                        "UnitQVSLeakage",
                        "FactorMbarMinToUnitChangeRate",
                        "FactorMeasuredChangeRateToMbarMin",
                        "FactorQVS",
                        "VolumeVa",
                        "VolumeVak"});
            table1.AddRow(new string[] {
                        "1",
                        "mbar",
                        "bar",
                        "0.001",
                        "mbar/min",
                        "dm3/h",
                        "1",
                        "1",
                        "1",
                        "50.5",
                        "75"});
            table1.AddRow(new string[] {
                        "2",
                        "mbar",
                        "bar",
                        "0.001",
                        "mbar/min",
                        "dm3/h",
                        "0.17",
                        "2",
                        "3",
                        "50",
                        "60"});
#line 8
 testRunner.Given("The InspectorSettings contains the following values:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SequenceNumber",
                        "Values",
                        "Statuses"});
            table2.AddRow(new string[] {
                        "1",
                        "30.5;30.7;30.9;31.1;31.3;31.5;31.7;31.9;32.1;32.3;32.5;32.7;32.9;33.1;33.3;33.5;3" +
                            "3.7;33.9;34.1;33.7;33.3;32.9;32.5;32.1;31.7;31.3;30.9;30.5;30.1;29.7;29.3;28.9;2" +
                            "8.5;28.1;27.7",
                        "0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;"});
            table2.AddRow(new string[] {
                        "2",
                        "30.5;30.7;30.9;31.1;31.3;31.5;31.7;31.9;32.1;32.3;32.5;32.7;32.9;33.1;33.3;33.5;3" +
                            "3.7;33.9;34.1;33.7;33.3;32.9;32.5;32.1;31.7;31.3;30.9;30.5;30.1;29.7;29.3;28.9;2" +
                            "8.5;28.1;27.7",
                        "0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;"});
#line 12
 testRunner.And("And the following measurements are received", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SequenceNumber",
                        "Measurement",
                        "Minimum",
                        "Maximum",
                        "Average",
                        "LeakageValue",
                        "LeakageV1",
                        "LeakageV2",
                        "LeakageMembrane",
                        "IoStatus"});
            table3.AddRow(new string[] {
                        "1",
                        "27.7",
                        "27.7",
                        "34.1",
                        "31.6",
                        "-48",
                        "-145.4",
                        "-216",
                        "-4.8",
                        "0"});
            table3.AddRow(new string[] {
                        "2",
                        "27.7",
                        "27.7",
                        "34.1",
                        "31.6",
                        "-16.3",
                        "-864.0",
                        "-1036.8",
                        "-28.8",
                        "0"});
#line 16
 testRunner.Then("The following measurementValues should be received", ((string)(null)), table3, "Then ");
#line 20
 testRunner.When("I start a ScriptCommand5x", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify rounding")]
        [NUnit.Framework.CategoryAttribute("VerifyRounding")]
        public virtual void VerifyRounding()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify rounding", new string[] {
                        "VerifyRounding"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SequenceNumber",
                        "UnitLowPressure",
                        "UnitHighPressure",
                        "FactorLowHighPressure",
                        "UnitChangeRate",
                        "UnitQVSLeakage",
                        "FactorMbarMinToUnitChangeRate",
                        "FactorMeasuredChangeRateToMbarMin",
                        "FactorQVS",
                        "VolumeVa",
                        "VolumeVak"});
            table4.AddRow(new string[] {
                        "1",
                        "mbar",
                        "bar",
                        "0.001",
                        "mbar/min",
                        "dm3/h",
                        "1",
                        "1",
                        "1",
                        "50.5",
                        "75"});
            table4.AddRow(new string[] {
                        "2",
                        "mbar",
                        "bar",
                        "0.001",
                        "mbar/min",
                        "dm3/h",
                        "0.17",
                        "2",
                        "3",
                        "50",
                        "60"});
#line 24
 testRunner.Given("The InspectorSettings contains the following values:", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SequenceNumber",
                        "Values",
                        "Statuses"});
            table5.AddRow(new string[] {
                        "1",
                        "30.5;30.7;30.9;31.1;31.3;31.5;31.7;31.9;32.1;32.3;32.5;32.7;32.9;33.1;33.3;33.5;3" +
                            "3.7;33.9;34.100001;33.7;33.3;32.9;32.5;32.1;31.7;31.3;30.9;30.5;30.1;29.7;29.3;2" +
                            "8.9;28.5;28.1;27.700001",
                        "0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;"});
            table5.AddRow(new string[] {
                        "2",
                        "30.5;30.7;30.9;31.1;31.3;31.5;31.7;31.9;32.1;32.3;32.5;32.7;32.9;33.1;33.3;33.5;3" +
                            "3.7;33.9;34.100001;33.7;33.3;32.9;32.5;32.1;31.7;31.3;30.9;30.5;30.1;29.7;29.3;2" +
                            "8.9;28.5;28.1;27.700001",
                        "0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;"});
#line 28
 testRunner.And("And the following measurements are received", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "SequenceNumber",
                        "Measurement",
                        "Minimum",
                        "Maximum",
                        "Average",
                        "LeakageValue",
                        "LeakageV1",
                        "LeakageV2",
                        "LeakageMembrane",
                        "IoStatus"});
            table6.AddRow(new string[] {
                        "1",
                        "27.700001",
                        "27.700001",
                        "34.100001",
                        "31.6",
                        "-48",
                        "-145.4",
                        "-216",
                        "-4.8",
                        "0"});
            table6.AddRow(new string[] {
                        "2",
                        "27.700001",
                        "27.700001",
                        "34.100001",
                        "31.6",
                        "-16.3",
                        "-864.0",
                        "-1036.8",
                        "-28.8",
                        "0"});
#line 32
 testRunner.Then("The following measurementValues should be received", ((string)(null)), table6, "Then ");
#line 36
 testRunner.When("I start a ScriptCommand5x", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
