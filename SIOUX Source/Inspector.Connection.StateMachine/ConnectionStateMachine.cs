
///////////////////////////////////////////////////////
// Generated by Sioux C# StateMachine Code Generator //
//                 DO NOT EDIT				         //
///////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using Inspector.Infra;
using Inspector.Model;
using Inspector.Model.BluetoothDongle;
using StateMachines.Base;

namespace Inspector.Connection
{

    public partial class ConnectionStateMachine : StateMachine, IConnectionStateMachine
    {
        public ConnectionStateMachine()
        {
            Add(new SendingCommand(this, null));



            Add(new Error(this, null));



            Add(new Disconnecting(this, null));



            Add(new Disconnected(this, null));



            Add(new ContinuousMeasure(this, null));



            Add(new Connecting(this, null));



            Add(new Connected(this, null));



            SetInitialState(typeof(Disconnected));
        }

        // Signals
        public void MessageReceivedTrigger(string data)
        {
            OnSignal("MessageReceivedTrigger", new object[] { data });
        }

        public void ErrorTrigger(string message, int errorCode)
        {
            OnSignal("ErrorTrigger", new object[] { message, errorCode });
        }

        public void NonFatalErrorTrigger()
        {
            OnSignal("NonFatalErrorTrigger", null);
        }

        public void DisconnectTrigger()
        {
            OnSignal("DisconnectTrigger", null);
        }

        public void DisconnectedTrigger()
        {
            OnSignal("DisconnectedTrigger", null);
        }

        public void ConnectTrigger(Dictionary<string, string> connectionParameters, List<BluetoothDongleInformation> allowedBluetoothDongles)
        {
            OnSignal("ConnectTrigger", new object[] { connectionParameters, allowedBluetoothDongles });
        }
		
		public void ContinuousMeasurementStartedTrigger()
        {
            OnSignal("ContinuousMeasurementStartedTrigger", null);
        }

        public void MeasurementReceivedTrigger(IList<Measurement> data)
        {
            OnSignal("MeasurementReceivedTrigger", new object[] { data });
        }

        public void ConnectFailedTrigger(string message, int errorCode)
        {
            OnSignal("ConnectFailedTrigger", new object[] { message, errorCode });
        }

        public void ConnectedTrigger(DeviceType deviceType)
        {
            OnSignal("ConnectedTrigger", new object[] { deviceType });
        }

        public void SendCommandTrigger(Infra.DeviceCommand command, string commandParameter)
        {
            OnSignal("SendCommandTrigger", new object[] { command, commandParameter });
        }

        public void StartContinuousMeasurementTrigger(int measurementFrequency)
        {
            OnSignal("StartContinuousMeasurementTrigger", new object[] { measurementFrequency });
        }

        public void StopContinuousMeasurementTrigger()
        {
            OnSignal("StopContinuousMeasurementTrigger", null);
        }

        public void ContinuousMeasurementStoppedTrigger()
        {
            OnSignal("ContinuousMeasurementStoppedTrigger", null);
        }

        public void UnPairDevicesTrigger(string address)
        {
            OnSignal("UnPairDevicesTrigger", new object[] { address });
        }

        public void DeviceUnPairedTrigger(string address)
        {
            OnSignal("DeviceUnPairedTrigger", new object[] { address });
        }

        public void DeviceUnPairFinishedTrigger()
        {
            OnSignal("DeviceUnPairFinishedTrigger", null);
        }
    }

    // Region template entered for non Region:  Not handled
} // end namespace Connection 
