//////////////////////////////////////////////////////////////////////////////////
// Initially Generated by Sioux C# StateMachine Code Generator 					//
//  User changes allowed, requires merging when re-generated		            //
//////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using Inspector.Model;
using StateMachines.Base;

namespace Inspector.Connection
{
    public class ContinuousMeasure : ContinuousMeasureBase
    {
        public ContinuousMeasure(StateMachine stateMachine, State superState) : base(stateMachine, superState) { }

        // Signals
        public override void ErrorTrigger(string message, int errorCode)
        {
            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR BEFORE THE TRIGGER CALL

            base.ErrorTrigger(message, errorCode);

            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR AFTER THE TRIGGER CALL		
        }
		
		public override void ContinuousMeasurementStartedTrigger()
		{
			// PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR BEFORE THE TRIGGER CALL
            ((ConnectionStateMachine)stateMachine).ContinuousMeasureReason = ContinuousMeasureReason.MEASUREMENTSTARTED;
			base.ContinuousMeasurementStartedTrigger();
			
			// PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR AFTER THE TRIGGER CALL		
		}

        public override void MeasurementReceivedTrigger(IList<Measurement> measurementData)
        {
            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR BEFORE THE TRIGGER CALL
            ((ConnectionStateMachine)stateMachine).ContinuousMeasureReason = ContinuousMeasureReason.MEASUREMENTRECEIVED;

            base.MeasurementReceivedTrigger(measurementData);

            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR AFTER THE TRIGGER CALL		
        }

        public override void StopContinuousMeasurementTrigger()
        {
            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR BEFORE THE TRIGGER CALL
            System.Diagnostics.Debug.WriteLine("Statemachine: Stop continuous measurement");
            ((ConnectionStateMachine)stateMachine).Hal.StopContinuousMeasurement();

            base.StopContinuousMeasurementTrigger();

            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR AFTER THE TRIGGER CALL		
            System.Diagnostics.Debug.WriteLine("Statemachine: Stop continuous measurement state changed");
        }

        public override void ContinuousMeasurementStoppedTrigger()
        {
            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR BEFORE THE TRIGGER CALL
            ((ConnectionStateMachine)stateMachine).ConnectedReason = ConnectedReason.CONTINEOUSMEASUREMENTSTOPPED;

            base.ContinuousMeasurementStoppedTrigger();

            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR AFTER THE TRIGGER CALL		
        }

        // State Behaviors

        public override void body()
        {
            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR BEFORE THE BODY (DO) CALL

            base.body();

            // PUT YOUR OWN CODE HERE IF THE ACTION SHOULD OCCUR AFTER THE BODY (DO) CALL
        }
    }
}
