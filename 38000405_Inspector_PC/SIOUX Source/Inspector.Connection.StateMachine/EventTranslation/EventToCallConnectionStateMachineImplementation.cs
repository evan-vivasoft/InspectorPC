//////////////////////////////////////////////////////////////////////////////////
// Initially Generated by Sioux C# StateMachine Code Generator 					//
//  User changes allowed, requires merging when re-generated		            //
//////////////////////////////////////////////////////////////////////////////////
using Inspector.Hal.Interfaces;
using Inspector.Infra.Ioc;
using HalEvents = Inspector.Hal.Interfaces.Events;

namespace Inspector.Connection.EventTranslation
{
    /// <summary>
    /// Convert incoming events to function calls on the state machine  
    /// </summary>
    public partial class EventToCallConnectionStateMachine
    {
        private IHal m_Hal;

        private IHal Hal
        {
            get { return m_Hal ?? (m_Hal = ContextRegistry.Context.Resolve<IHal>()); }
            set { m_Hal = value; }
        }

        public void Initialize()
        {
            Hal.Connected += Hal_Connected;
            Hal.ConnectFailed += Hal_ConnectFailed;
            Hal.Disconnected += Hal_Disconnected;
            Hal.MessageReceived += Hal_MessageReceived;
            Hal.MessageReceivedError += Hal_MessageReceivedError;
            Hal.MeasurementsReceived += Hal_MeasurementsReceived;
            Hal.ContinuousMeasurementStopped += Hal_ContinuousMeasurementStopped;
            Hal.ContinuousMeasurementStarted += Hal_ContinuousMeasurementStarted;
            Hal.DeviceUnPaired += Hal_DeviceUnPaired;
            Hal.DeviceUnPairFinished += Hal_DeviceUnPairFinished;
        }

        private void Hal_DeviceUnPairFinished(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.DeviceUnPairFinishedTrigger();
        }

        private void Hal_DeviceUnPaired(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.DeviceUnPairedTrigger((e as HalEvents.DeviceUnPairedEventArgs).Address);
        }

        private void Hal_ContinuousMeasurementStarted(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.ContinuousMeasurementStartedTrigger();
        }

        private void Hal_ContinuousMeasurementStopped(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.ContinuousMeasurementStoppedTrigger();
        }

        private void Hal_MeasurementsReceived(object sender, System.EventArgs e)
        {
            var measurementReceivedEventArgs = e as HalEvents.MeasurementsReceivedEventArgs;
            if (measurementReceivedEventArgs != null)
            {
                m_ConnectionStateMachineContext.MeasurementReceivedTrigger(measurementReceivedEventArgs.Measurements);
            }
        }

        private void Hal_MessageReceivedError(object sender, System.EventArgs e)
        {
            var messageErrorEventsArgs = e as HalEvents.MessageErrorEventArgs;
            if (messageErrorEventsArgs != null)
            {
                m_ConnectionStateMachineContext.ErrorTrigger(messageErrorEventsArgs.Message, messageErrorEventsArgs.ErrorCode);
            }
        }

        private void Hal_MessageReceived(object sender, System.EventArgs e)
        {
            var messageReceivedEventArgs = e as HalEvents.MessageReceivedEventArgs;
            if (messageReceivedEventArgs != null)
            {
                m_ConnectionStateMachineContext.MessageReceivedTrigger(messageReceivedEventArgs.Data);
            }
        }

        private void Hal_Disconnected(object sender, System.EventArgs e)
        {
            m_ConnectionStateMachineContext.DisconnectedTrigger();
        }

        private void Hal_ConnectFailed(object sender, System.EventArgs e)
        {
            var connectFailedEventArgs = e as HalEvents.ConnectFailedEventArgs;
            if (connectFailedEventArgs != null)
            {
                m_ConnectionStateMachineContext.ConnectFailedTrigger(connectFailedEventArgs.Message, connectFailedEventArgs.ErrorCode);
            }
        }

        private void Hal_Connected(object sender, System.EventArgs e)
        {
            var connectSucceededEventArgs = e as HalEvents.ConnectedEventArgs;
            if (connectSucceededEventArgs != null)
            {
                m_ConnectionStateMachineContext.ConnectedTrigger(connectSucceededEventArgs.DeviceType);
            }
        }
    }
}
