///////////////////////////////////////////////////////
// Generated by Sioux C# StateMachine Code Generator //
//                 DO NOT EDIT				         //
///////////////////////////////////////////////////////

using System.Collections.Generic;
using Inspector.Model.BluetoothDongle;
using StateMachines.Base;

namespace Inspector.Connection
{
    public class DisconnectedBase : State
    {
        public DisconnectedBase(StateMachine stateMachine, State superState) : base(stateMachine, superState) { }

        // Signals
        public virtual void DisconnectTrigger()
        {

            SetState(typeof(Disconnected));
        }

        public virtual void ConnectTrigger(Dictionary<string, string> connectionParameters, List<BluetoothDongleInformation> allowedBluetoothDongles)
        {
            ((ConnectionStateMachine)stateMachine).ConnectionParameters = connectionParameters;
            ((ConnectionStateMachine)stateMachine).AllowedBluetoothDongles = allowedBluetoothDongles;

            SetState(typeof(Connecting));
        }

        public virtual void UnPairDevicesTrigger(string address)
        {
            ((ConnectionStateMachine)stateMachine).Do_UnpairDevices(address);
            SetState(typeof(Disconnected));
        }

        public virtual void DeviceUnPairedTrigger(string address)
        {
            ((ConnectionStateMachine)stateMachine).Do_DeviceUnPaired(address);
            SetState(typeof(Disconnected));
        }

        public virtual void DeviceUnPairFinishedTrigger()
        {
            ((ConnectionStateMachine)stateMachine).Do_DeviceUnPairFinished();
            SetState(typeof(Disconnected));
        }

        // State Behaviors

        public override void body()
        {
            ((ConnectionStateMachine)stateMachine).Do_Disconnected();
        }
    }
}
