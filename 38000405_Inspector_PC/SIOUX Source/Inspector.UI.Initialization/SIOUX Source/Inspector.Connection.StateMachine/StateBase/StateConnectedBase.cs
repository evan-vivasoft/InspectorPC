///////////////////////////////////////////////////////
// Generated by Sioux C# StateMachine Code Generator //
//                 DO NOT EDIT				         //
///////////////////////////////////////////////////////


using StateMachines.Base;

namespace Inspector.Connection
{
    public class ConnectedBase : State
    {
        public ConnectedBase(StateMachine stateMachine, State superState) : base(stateMachine, superState) { }

        // Signals
        public virtual void SendCommandTrigger(Infra.DeviceCommand command, string commandParameter)
        {
            ((ConnectionStateMachine)stateMachine).Command = command;
            ((ConnectionStateMachine)stateMachine).CommandParameter = commandParameter;

            SetState(typeof(SendingCommand));
        }

        public virtual void DisconnectTrigger()
        {

            SetState(typeof(Disconnecting));
        }

        public virtual void StartContinuousMeasurementTrigger(int measurementFrequency)
        {
            ((ConnectionStateMachine)stateMachine).MeasurementFrequency = measurementFrequency;

            SetState(typeof(ContinuousMeasure));
        }


        // State Behaviors

        public override void entry()
        {
            ((ConnectionStateMachine)stateMachine).Entry_Connected();
        }

        public override void body()
        {
            ((ConnectionStateMachine)stateMachine).Do_Connected();
        }

        public override void exit()
        {
            ((ConnectionStateMachine)stateMachine).Exit_Connected();
        }
    }
}
